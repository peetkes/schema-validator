buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        //Needed for CorbTask to dynamically generate properties from CoRB Options class
        classpath "com.marklogic:marklogic-corb:${corbVersion}"
    }
}

plugins {
  id "net.saliman.properties" version "1.5.1"
  id "com.marklogic.ml-gradle" version "4.5.2"
}

repositories {
    mavenCentral()
    // Needed for some mlcp dependencies, such as commons-csv:1.5.1-marklogic
    maven { url "https://developer.marklogic.com/maven2/" }
}

configurations {
    // This configuration captures the dependencies for running CoRB (Content Reprocessing in Bulk).
    // This is only needed if you want to run corb via Gradle tasks.
    // If you do, using com.marklogic.gradle.task.CorbTask is a useful starting point, as shown below.
    corb {
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        }
    }
    mlcp
}

dependencies {
    // required to run CoRB2
    corb "com.marklogic:marklogic-corb:${corbVersion}"
    corb "com.marklogic:marklogic-xcc:${mlVersion}"
    // optional
    //corb 'org.jasypt:jasypt:1.9.2' // would be necessary to leverage JasyptDecrypter
    mlcp "com.marklogic:mlcp:${mlVersion}"
    mlcp files("mlcp")
}

ext {
    // XCC URL for running corb task below
    contentXccUrl = "xcc://${mlUsername}:${mlPassword}@${mlHost}:${mlRestPort}"
}

task processSchemas(type: com.marklogic.gradle.task.CorbTask) {
    xccConnectionUri = contentXccUrl
    moduleRoot = "/corb/schema"
    urisModule = "uris.xqy"
    processModule = "transform.xqy"
}

task processSchematrons(type: com.marklogic.gradle.task.CorbTask) {
    xccConnectionUri = contentXccUrl
    moduleRoot = "/corb/schematron"
    urisModule = "uris.xqy"
    processModule = "transform.xqy"
}

mlReloadModules.finalizedBy(processSchematrons)
mlLoadData.finalizedBy(processSchemas, processSchematrons)
mlPostDeploy.finalizedBy(processSchemas, processSchematrons)

task loadAanleveringen(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    port = Integer.parseInt(mlRestPort)
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data/aanleveringen/opdracht-1-besluit"
    output_collections = "/opera/options/opdrachtbestanden"
    output_permissions = "schema-test-reader,read,schema-test-writer,update"
    output_uri_replace = ".*data/aanleveringen,'/opera/import'"
    transform_module = "/transform/envelope.xqy"
    transform_namespace = "http://koop.overheid.nl/lvbb/transform/envelope"
    transform_param = "oin=1q2w3e4r,id-levering=aanlevering-1,id-bevoegdgezag=bg-1"
}